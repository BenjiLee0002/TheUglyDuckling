# GridMovement class 
# Handles all grid based navigation for the robot

from grid import Grid
import grassfire as gf 
import queue, time

class GridMovement:

	def __init__(self, grid, queue):
		# direction bytes
		self.fwd = b'\xA0'
		self.rev = b'\x0A'
		self.rotl = b'\x00'
		self.rotr = b'\xAA'
		self.strl = b'\x22'
		self.strr = b'\x88'

		# motion bytes
		self.allmotors = b'\x55'
		self.right = b'\x05'
		self.left = b'\x50'
		self.front = b'\x11'
		self.rear = b'\x44'
		self.left45 = b'\x14'
		self.right45 = b'\x41'
	
		self.grid = grid
		self.queue = queue
		self.current = (7,0) #Hardcoded should be (4,3)
		self.goal = (7,2) #Hardcoded for now. Should be generated by find_goal()
		self.facing = -90
		self.path = []
		self.movement = {
			(0,1): [self.fwd, self.allmotors, 0], (0, -1): [self.rev, self.allmotors, 180],
			(1,0): [self.strr, self.allmotors, 90], (-1, 0): [self.strl, self.allmotors, -90],
			(1,1): [self.fwd, self.allmotors, 45], (-1, 1): [self.fwd, self.allmotors, -45],
			(1,-1): [self.rev, self.allmotors, 135], (-1,-1): [self.rev, self.allmotors, -135]
			}

	# Not yet implemented
	# Sets grid.blocks closest block to goal.
	def find_goal(self):
		pass

	# Generates shortest path to goal using grassfire algorithim
	def find_path(self):
		visited = gf.search(self.grid, self.current, self.goal)
		self.path = gf.construct_path(self.grid, visited, self.current)

	# Follows the generated path by subtracting the next location
	# from self.current and using translate_dir() and self.movement
	# to determine the proper movement
	def follow_path(self):
		dist = 12 # Default distance we want to move
		prev_diagonal = False # True if previous move was diagonal
		
		# Loop with index so that we can check the next movement
		# along with curent move
		for index, mov in enumerate(self.path):
			currentResult = (mov[0] - self.current[0], mov[1] - self.current[1])
			currentResult = self.translate_dir(currentResult)
			
			# Don't bother checking next move if it doesn't exist
			if (index != len(self.path) -1):
				nextMov = self.path[index+1]
				nextResult = (nextMov[0] - mov[0], nextMov[1] - mov[1])
				nextResult = self.translate_dir(nextResult)
				# If next move request is the same as current 
				# increase distance moved
				if (currentResult == nextResult):
					# Turn to face toward movement in order to accelerate
					self.face(mov)
					dist = dist +12
					self.current = mov
					# reset diagonal flag since we turned toward mov anyway
					prev_diagonal = False
					# We want to skip over the rest of the loop
					# We're not ready to push a movement call to queue
					continue

			# If previous move was diagonal, turn towards next tile
			if(prev_diagonal):
					print(self.current)
					print(mov)
					self.face(mov)
					prev_diagonal = False
			# If mov is diagonal, turn towards the tile 
			if(gf.is_diagonal(self.current, mov)):
				self.face(mov)
				prev_diagonal = True
			# if dist > 12 then we have duplicate movements
			# We will accelerate
			if(dist > 12):
				args = (self.movement[currentResult][0], dist)
				self.queue.put(['accelerate', args])
			# Otherwise normal movement
			else:
				args = (self.movement[currentResult][0], dist, self.movement[currentResult][1])
				self.queue.put(['gridMove', args])

			self.current = mov
			# reset distance in case there was a stacked call 
			dist = 12
		
		# face goal after following path
		self.face(self.goal)

	# Face a tile connected to current tile
	def face(self, obj):
		result = (obj[0] - self.current[0], obj[1] - self.current[1])
		result = self.translate_dir(result)
		print(result)
		degrees = self.movement[result][2]
		if( degrees > 0):
			self.queue.put(['turn', (self.rotr, degrees)])
		elif(degrees < 0):
			self.queue.put(['turn', (self.rotl, degrees*-1)])
		self.facing = self.facing + degrees
		self.trim_facing()

	# Should be called anytime facing is updated
	# Keeps facing between -180 and 180 
	def trim_facing(self):
		if (self.facing > 180):
			self.facing = self.facing - 180
		elif (self.facing < -180):
			self.facing = self.facing + 180

	# Use facing to translate proper movement
	def translate_dir(self, mov, degrees=None):
		# Default to self.facing
		if (degrees is None):
			degrees = self.facing
		
		result = None
		if(degrees == 0):
			result = mov
		elif(degrees == 180 or degrees == -180):
			result = (mov[0] * -1, mov[1] * -1)
		elif(degrees == -90):
			result = (mov[1], mov[0] * -1)
		elif(degrees == 90):
			result = (mov[1] * -1, mov[0])
		# Translate diagonal facings
		else:
			x = mov[0] + mov[1]
			y = mov[1] - mov[0]
			if x is not 0:
				x = x/abs(x)
			if y is not 0:
				y = y/abs(y)
			temp = (x,y)
			result = self.translate_dir(temp, self.facing -45)

		return result