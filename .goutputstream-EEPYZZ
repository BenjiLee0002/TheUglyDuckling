from nav.gridMovement import GridMovement
from nav.grid import Grid
import queue, serial, time, math
import json
from constants import strr,strl, fwd
# from misc import get_sensor_data, closest_point

def closest_point(list, current):
    closest_point = None
    prev_dist = 0
    # get x and y of current
    cx, cy = current[0], current[1]

    for point in list:
        # get x ang y of point
        px,py = point[0], point[1]

        dist = abs(cx-px) + abs(cy-py)
        
        if closest_point == None or prev_dist > dist:
            closest_point = point
            prev_dist = dist

    return closest_point

def corrected_angle(angle, dist):
    angle = 180 - angle
    a = math.sqrt(math.pow(dist,2) + math.pow(3.5, 2) - 2*dist*3.5*math.cos(math.radians(angle)))
    angle_c = math.asin(math.sin(math.radians(angle))*dist/a)
    return math.ceil(180-angle-math.degrees(angle_c))
    
def map_JSON(filename, movement):
    with open(filename, encoding='utf-8') as data_file:
      data = json.loads(data_file.read())
    size = data['size']
    x_arr = data['x coords']
    y_arr = data['y coords']
    for i in range(size):
      movement.map_target((x_arr[i], y_arr[i]))
      
def get_sensor_data(serial):
    byteArr = b'\x08' + b'\x00' + b'\x00' + b'\x00'
    serial.write(byteArr)
    time.sleep(1)
    left = int.from_bytes(serial.read(1),'little')
    right = int.from_bytes(serial.read(1),'little')
    print(left, right)
angle = 0
dist = 0

ser = serial.Serial('/dev/ttyACM0', 9600, timeout=2)
time.sleep(1)
q = queue.Queue()
grid = Grid(8,8)
movement = GridMovement(grid, ser)
#map_JSON('mar1.json', movement)

#get_sensor_data(ser)


movement.reset_servo()
movement.pickup()
movement.drop()

